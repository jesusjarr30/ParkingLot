// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table parking {
  id integer [primary key]
  name varchar (100)
  location integer
  spaces integer
  unavailable integer
  idprices integer 
  softDelete boolean
  created_at timestamp
}

Table userCategories{
  id integer [primary key]
  role varchar
  softDelete varchar
  created_at timestamp
}

Table user {
  id integer [primary key]
  name varchar(100)
  socialNumber varcahr(15)
  RFC varcahr(15)
  number varcahr(15)
  idSupervisor integer
  idCategories ineteger
  password varchar(100)
  softDelete boolean
  created_at timestamp
}
Table ticket {
  id integer [primary key]
  idParking integer
  idLTP integer
  active boolean
  start date
  finish date
  softDelete boolean

}
Table cost{
  id integer [primary key]
  idTicket integer
  lost boolean
  extraCharge double
  total integer
  softDelete boolean
}

Table prices {
  id integer [primary key]
  hourP double
  longTerm double
  softDelete boolean

}
Table longTermParking {
  id integer [primary key]
  idcustomer integer
  idParking integer
  softDelete boolean

}
Table customer {
  id integer [primary key]
  name varchar(100)
  idCompany integer
  plateCar varcahr(15)
  brand varchar(50)
  year integer
  color varchar(15)
  active boolean
  softDelete boolean

}
Table company {
  id integer [primary key]
  name varchar(100)
  NumEmployes integer
  discounts double 
  RFC varchar(15)
}

Table expenses {
  id integer [primary key]
  idParking integer
  idUser integer
  reason integer
  price varchar
  autorization boolean
  status char
  softDelete boolean

}
Table invoices {
  id integer [primary key]
  dateE date
  total double
  idCompany integer
  softDelete boolean
}

Table crash {
  id integer [primary key]
  idCutomer integer
  idTicket integer
  driverName varhcar(100)
  plate varchar(10)
  licenseDriver varchar(100)
  details varchar(1000)
  cost double
  status char
  softDelete boolean
}
Table workingRelationship{
  id integer [primary key]
  idUser integer
  idParking integer 
}
Table payments {
  id Integer [primary key]
  idCost integer
  deposit double
  metodo char
  tarjeta varchar
  
}

Ref: parking.idprices > prices.id

Ref: user.idCategories > userCategories.id
Ref: user.idSupervisor > user.id

Ref: ticket.idLTP <> longTermParking.id
Ref: ticket.idParking > parking.id

Ref: longTermParking.idcustomer > customer.id
Ref: longTermParking.idParking > parking.id

Ref: customer.idCompany > company.id

Ref: expenses.idParking > parking.id
Ref: expenses.idUser >user.id


Ref: crash.idTicket > ticket.id
Ref: invoices.idCompany > company.id


Ref: workingRelationship.idParking > parking.id
Ref: workingRelationship.idUser > user.id

Ref: cost.idTicket - ticket.id
Ref: cost.id < payments.idCost



use parkingLot;
#relaciones creadas por mi 
ALTER TABLE ticket ADD CONSTRAINT fk_parking_d FOREIGN KEY (id_parking) REFERENCES parking(id);
ALTER TABLE cost ADD CONSTRAINT fk_ticket FOREIGN KEY (id_ticket) REFERENCES ticket(id);
ALTER TABLE payments  ADD CONSTRAINT fk_cost FOREIGN KEY (id_cost) REFERENCES cost(id);
ALTER TABLE parking ADD CONSTRAINT fk_prices_parking FOREIGN KEY (id_prices) REFERENCES prices(id);
ALTER TABLE crash ADD CONSTRAINT fk_crash FOREIGN KEY (id_ticket) REFERENCES ticket(id);
ALTER TABLE expenses ADD CONSTRAINT fk_expenses_parking FOREIGN KEY (id_parking) REFERENCES parking(id);
ALTER TABLE expenses ADD CONSTRAINT fk_expenses_user FOREIGN KEY (id_user) REFERENCES user(id);
ALTER TABLE working_relationship ADD CONSTRAINT fk_working_user FOREIGN KEY (id_user) REFERENCES user(id);
ALTER TABLE working_relationship ADD CONSTRAINT fk_parking FOREIGN KEY (id_parking) REFERENCES parking(id);
ALTER TABLE user ADD CONSTRAINT fk_categories FOREIGN KEY (id_categories) REFERENCES user_categories(id);
ALTER TABLE long_term_parking ADD CONSTRAINT fk_parking_f FOREIGN KEY (id_parking) REFERENCES parking(id);
ALTER TABLE long_term_parking ADD CONSTRAINT fk_Customer FOREIGN KEY (id_customer) REFERENCES customer(id);
ALTER TABLE customer ADD CONSTRAINT fk_company FOREIGN KEY (id_company) REFERENCES company(id);
ALTER TABLE invoices ADD CONSTRAINT fk_invoices FOREIGN KEY (id_company) REFERENCES company(id);



///primero es necesesario agregar todos los tickets 

INSERT INTO parkingLot.prices
(hourp, id, long_term, soft_delete)
VALUES(35, 1, 180, 0);

INSERT INTO parkingLot.prices
(hourp, id, long_term, soft_delete)
VALUES(15, 2, 160, 0);

INSERT INTO parkingLot.prices
(hourp, id, long_term, soft_delete)
VALUES(16, 3, 165, 0);

INSERT INTO parkingLot.prices
(hourp, id, long_term, soft_delete)
VALUES(18, 4, 150, 0);

INSERT INTO parkingLot.prices
(hourp, id, long_term, soft_delete)
VALUES(12, 5, 170, 0);

INSERT INTO parkingLot.prices
(hourp, id, long_term, soft_delete)
VALUES(19, 6, 150, 0);



//agregar los parking lots




INSERT INTO parkingLot.parking
(id, id_prices, soft_delete, spaces, unavailable, created_at, location, name)
VALUES (1, 1, 0, 20, 1, NOW(), 'Av california', 'park Jesus');



INSERT INTO parkingLot.ticket
(active, id, id_parking, idltp, soft_delete, finish, `start`)
VALUES(1, 0, 1, null, 0, null, now());






SHOW CREATE TABLE parkingLot.ticket;

show columns from workingRelationship;

drop database parkingLot;

select count(*) from parking as p 
join ticket as t on p.id =t.id_parking 
where t.idltp is null and t.active = true;

SELECT (COUNT(*) - p.unavailable),p. AS available_spaces
FROM parking AS p
JOIN ticket AS t ON p.id = t.id_parking
WHERE t.idltp IS NULL 
  AND t.active = TRUE  
  AND p.id = 1
GROUP BY p.id;

select count(*) from long_term_parking ltp 
join parking as p on p.id = ltp.id_parking 
where ltp.soft_delete =FALSE and p.id=1;

#Obtener todos los espacios disponibles de un estacionamiento libres.


SELECT 
    (spaces-(available_spaces + long_term_count)) AS total_available_spaces
FROM (
    SELECT (COUNT(*) - p.unavailable) AS available_spaces,p.spaces AS spaces
    FROM parking AS p
    JOIN ticket AS t ON p.id = t.id_parking
    WHERE t.idltp IS NULL 
      AND t.active = TRUE  
      AND p.id = 1
    GROUP BY p.id
) AS ticket_count
CROSS JOIN (
    SELECT COUNT(*) AS long_term_count
    FROM long_term_parking ltp
    JOIN parking AS p ON p.id = ltp.id_parking
    WHERE ltp.soft_delete = FALSE and p.id=1
) AS ltp_count;


ALTER TABLE long_term_parking DROP FOREIGN KEY fk_parking;

SELECT CONSTRAINT_NAME 
FROM information_schema.KEY_COLUMN_USAGE 
WHERE TABLE_NAME = 'ticket' 
AND TABLE_SCHEMA = 'parkingLot';


ALTER TABLE `ticket` MODIFY `idltp` INT NULL;











